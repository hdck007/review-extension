{"version":3,"file":"contentScript.263726204ae23fd96b4d.hot-update.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAGA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAGA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAAA;AAGA;AACA;AACA;AACA;AAAA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAOA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAKA;AACA;AACA;AAAA;AASA;AAAA;AAAA;AAGA;AAAA;AA5QA;AA8QA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AA1TA;AA4CA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;ACnDA","sources":["webpack://review/./src/pages/Content/modules/Root.jsx","webpack://review/webpack/runtime/getFullHash"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport Drawer from 'react-modern-drawer';\nimport 'react-modern-drawer/dist/index.css';\nimport Swal from 'sweetalert2';\nimport Marker from './components/marker';\nimport MarkerSidebarElement from './components/markersidebar';\n\nfunction getDomPath(el) {\n  if (!el) {\n    return;\n  }\n  var stack = [];\n  var isShadow = false;\n  while (el.parentNode != null) {\n    // console.log(el.nodeName);\n    var sibCount = 0;\n    var sibIndex = 0;\n    // get sibling indexes\n    for (var i = 0; i < el.parentNode.childNodes.length; i++) {\n      var sib = el.parentNode.childNodes[i];\n      if (sib.nodeName == el.nodeName) {\n        if (sib === el) {\n          sibIndex = sibCount;\n        }\n        sibCount++;\n      }\n    }\n    // if ( el.hasAttribute('id') && el.id != '' ) { no id shortcuts, ids are not unique in shadowDom\n    //   stack.unshift(el.nodeName.toLowerCase() + '#' + el.id);\n    // } else\n    var nodeName = el.nodeName.toLowerCase();\n    if (isShadow) {\n      nodeName += '::shadow';\n      isShadow = false;\n    }\n    if (sibCount > 1) {\n      stack.unshift(nodeName + ':nth-of-type(' + (sibIndex + 1) + ')');\n    } else {\n      stack.unshift(nodeName);\n    }\n    el = el.parentNode;\n    if (el.nodeType === 11) {\n      // for shadow dom, we\n      isShadow = true;\n      el = el.host;\n    }\n  }\n  stack.splice(0, 1); // removes the html element\n  return stack.join(' > ');\n}\n\nconst Root = ({ urlId, roomId, url }) => {\n  const [loading, setLoading] = useState(true);\n  const [open, setOpen] = useState(false);\n  const [leftOpen, setLeftOpen] = useState(false);\n  const [comment, setComment] = useState('');\n  const [type, setType] = useState('kudos');\n  const [selector, setSelector] = useState('');\n  const [markers, setMarkers] = useState([]);\n  const [highlighted, setHighlighted] = useState(null);\n\n  useEffect(() => {\n    window.addEventListener('click', (e) => {\n      if (e.ctrlKey) {\n        e.preventDefault();\n        let element = e.target;\n        if (!e.target) return;\n        while (\n          !(\n            element?.nodeName &&\n            element.nodeName !== 'path' &&\n            element.nodeName !== 'svg' &&\n            element.nodeName !== 'text' &&\n            element.nodeName !== 'IMG'\n          )\n        ) {\n          element = element.parentNode;\n        }\n        console.log('the element', element.nodeName);\n        const path = getDomPath(element);\n        e.target.style.border = '2px solid yellow';\n        setHighlighted(e.target);\n        setSelector(path);\n        setOpen(true);\n        return;\n      }\n      if (highlighted) {\n        console.log(highlighted);\n        highlighted.style.border = 'none';\n      }\n    });\n  }, [highlighted]);\n\n  useEffect(() => {\n    fetch(\n      `https://review-backend-production.up.railway.app/markers/get?roomId=${roomId}&urlId=${urlId}`\n    )\n      .then((res) => {\n        if (res.ok) {\n          return res.json();\n        }\n        Swal.fire({\n          icon: 'error',\n          title: 'Oops...',\n          text: 'Something went wrong!',\n        });\n      })\n      .then((data) => {\n        console.log(data);\n        setMarkers(data);\n        setLoading(false);\n      });\n  }, [urlId, roomId]);\n\n  const toggleDrawer = () => {\n    setOpen((prev) => !prev);\n  };\n\n  const toggleLeftDrawer = () => {\n    setLeftOpen((prev) => !prev);\n  };\n\n  const handleAddMarker = () => {\n    if (loading) return;\n    if (!window.getSelection().anchorNode?.parentElement) return;\n    const selectionPath = getDomPath(\n      window.getSelection().anchorNode.parentElement\n    );\n    setSelector(selectionPath);\n    toggleDrawer();\n  };\n\n  const handleCommentChange = (e) => {\n    setComment(e.target.value);\n  };\n\n  const handleTypeChange = (e) => {\n    setType(e.target.value);\n  };\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    if (loading) return;\n    if (!selector) return;\n    const data = {\n      roomId,\n      urlId,\n      comment,\n      type,\n      selector,\n    };\n    fetch('https://review-backend-production.up.railway.app/markers/create', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(data),\n    })\n      .then((res) => {\n        if (res.ok) {\n          return res.json();\n        }\n        Swal.fire({\n          icon: 'error',\n          title: 'Oops...',\n          text: 'Something went wrong!',\n        });\n      })\n      .then((data) => {\n        console.log('markers', data);\n        setLoading(false);\n      });\n    setComment('');\n    setSelector('');\n    toggleDrawer();\n  };\n\n  return (\n    <>\n      <button\n        style={{\n          position: 'fixed',\n          top: '10px',\n          right: '10px',\n          zIndex: 10000,\n          backgroundColor: 'black',\n          color: 'white',\n          padding: '10px 20px',\n          borderRadius: '50px',\n        }}\n        onClick={handleAddMarker}\n      >\n        {loading ? 'Loading...' : 'Add Marker'}\n      </button>\n      <button\n        style={{\n          position: 'fixed',\n          bottom: '10px',\n          left: '10px',\n          zIndex: 10000,\n          backgroundColor: 'black',\n          color: 'white',\n          padding: '10px 20px',\n          borderRadius: '50px',\n        }}\n        onClick={toggleLeftDrawer}\n      >\n        View Markers\n      </button>\n      <button\n        style={{\n          position: 'fixed',\n          bottom: '10px',\n          right: '10px',\n          zIndex: 10000,\n          backgroundColor: 'black',\n          color: 'white',\n          padding: '10px 20px',\n          borderRadius: '50px',\n        }}\n      >\n        <a\n          href={`${url}?url_id=${urlId}&room_id=${roomId}`}\n          target=\"_blank\"\n          rel=\"noreferrer\"\n          style={{ color: 'white', textDecoration: 'none' }}\n        >\n          {`${url}?url_id=${urlId}&room_id=${roomId}`}\n        </a>\n      </button>\n      <Drawer open={open} direction=\"right\" onClose={toggleDrawer}>\n        <div\n          style={{\n            marginTop: '30%',\n          }}\n        >\n          <h1\n            style={{\n              textAlign: 'center',\n              fontSize: '2rem',\n            }}\n          >\n            Add marker\n          </h1>\n          <form\n            style={{\n              display: 'flex',\n              flexDirection: 'column',\n              alignItems: 'center',\n              padding: '20px',\n              gap: '20px',\n            }}\n            onSubmit={handleSubmit}\n          >\n            <textarea\n              type=\"text\"\n              placeholder=\"Add comment\"\n              value={comment}\n              style={{\n                borderRadius: '10px',\n                width: '100%',\n              }}\n              onChange={handleCommentChange}\n            />\n            <select\n              name=\"type\"\n              id=\"type\"\n              style={{\n                borderRadius: '10px',\n                width: '100%',\n              }}\n              value={type}\n              onChange={handleTypeChange}\n            >\n              <option value=\"kudos\">Kudos</option>\n              <option value=\"bug\">Bug</option>\n              <option value=\"improvement\">Improvement</option>\n              <option value=\"query\">Query</option>\n            </select>\n            <button\n              style={{\n                padding: '10px 20px',\n                background: 'black',\n                color: 'white',\n                borderRadius: '100px',\n              }}\n              type=\"submit\"\n            >\n              Add\n            </button>\n          </form>\n        </div>\n      </Drawer>\n      <Drawer open={leftOpen} direction=\"left\" onClose={toggleLeftDrawer}>\n        <div\n          style={{\n            display: 'flex',\n            flexDirection: 'column',\n            alignItems: 'center',\n            padding: '20px',\n          }}\n        >\n          {!!markers.length ? (\n            markers.map((marker) => (\n              <MarkerSidebarElement\n                key={marker.id}\n                comment={marker.comment}\n                selector={marker.selector}\n              />\n            ))\n          ) : (\n            <h1>No markers</h1>\n          )}\n        </div>\n      </Drawer>\n      {!!markers.length &&\n        markers.map((marker) => <Marker key={marker.id} markerData={marker} />)}\n    </>\n  );\n};\n\nexport default Root;\n","__webpack_require__.h = () => (\"251f427417197413df65\")"],"names":[],"sourceRoot":""}